/*
	Antonios Katopodis - 3140076
	Athanasia Maria Koutsopoulou - 3140092
	Georgios Chaikalis - 3140218
	Dionysios Chasakis - 3140219
*/

Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	double_quotes = '"';
	single_quotes = ''';
	underscore = '_';
	space = ' ';
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]];

Tokens
	tab = 9;
	def = 'def';
	l_par = '(';
	r_par = ')';
	semi = ':';
	comma=',';
	if = 'if';
	while = 'while';
	for = 'for';
	in = 'in';
	return = 'return';
	print = 'print';
	assign = '=';
	minus_eq = '-=';
	div_eq = '/=';
	l_bracket = '[';
	r_bracket = ']';
	plus = '+';
	minus = '-';
	mult = '*';
	div = '/';
	less = '<';
	great = '>';
	diff = '!=';
	equal = '==';
	true = 'true';
	false = 'false';
	blank = (space | eol);
	line_comment = '#' not_eol* eol; 
	id = (underscore | letter) (underscore | letter | digit)*;
	string_lit = (double_quotes (letter | space )* double_quotes) | (single_quotes (letter | space )* single_quotes); 
	integer = digit+;

Ignored Tokens
	blank, line_comment;

Productions
	goal = commands* {-> New goal([commands])};
	
	commands = {func} function {-> New commands.func(function)} |
			   {stmt} statement {-> New commands.stmt(statement)};

	function = def id l_par argument? r_par semi statement 
                {-> New function(id, argument, statement)};

	argument = id assign_value? parameters* 
                {-> New argument(id, assign_value, [parameters])};
	
    assign_value = assign value {-> New assign_value(value)};
	
    parameters = comma id assign_value? 
                    {-> New parameters(id, assign_value)};

	statement = {if} tab* if comparison_top_level semi statement 
                    {-> New statement.if(comparison_top_level.comparison, statement)} |
                {while} tab* while comparison_top_level semi statement 
                    {-> New statement.while(comparison_top_level.comparison, statement)} |
                {for} tab* for [id1]:id in [id2]:id semi statement 
                    {-> New statement.for(id1, id2, statement)} |
                {return} tab* return expression_top_level 
                    {-> New statement.return(expression_top_level.expression)} |
                {print} tab* print arglist 
                    {-> New statement.print(arglist)} |
                {equals} tab* id assign expression_top_level 
                    {-> New statement.equals(id, expression_top_level.expression)} |
                {minus_equals} tab* id minus_eq expression_top_level 
                    {-> New statement.minus_equals(id, expression_top_level.expression)} |
                {div_equals} tab* id div_eq expression_top_level 
                    {-> New statement.div_equals(id, expression_top_level.expression)} |
                {array} tab* id l_bracket [exp1]:expression_top_level r_bracket assign [exp2]:expression_top_level 
                    {-> New statement.array(id, exp1.expression, exp2.expression)} |
                {function} tab* id l_par arglist? r_par
                    {-> New statement.function(id, arglist)};

	comparison_top_level {-> comparison} = {simple_comparison} comparison_bottom_level 
                                                {-> comparison_bottom_level.comparison} |
                                           {comp_between_comp_great} comparison_top_level great comparison_bottom_level 
                                                {-> New comparison.great(comparison_top_level.comparison, comparison_bottom_level.comparison)} |
                                           {comp_between_comp_less} comparison_top_level less comparison_bottom_level
                                                {-> New comparison.less(comparison_top_level.comparison, comparison_bottom_level.comparison)};

	comparison_bottom_level {-> comparison} = {exp_equality} [exp1]:expression_top_level equal [exp2]:expression_top_level
                                {-> New comparison.exp_equality(exp1.expression, exp2.expression)} |
							  {exp_not_equals} [exp1]:expression_top_level diff [exp2]:expression_top_level
                                {-> New comparison.exp_not_equals(exp1.expression, exp2.expression)} |
							  {true} true 
                                {-> New comparison.true(true)} |
							  {false} false 
                                {-> New comparison.false(false)} |
							  {expression} expression_top_level 
                                {-> New comparison.expression(expression_top_level.expression)};

	expression_top_level {-> expression} = {simple_mult} expression_medium_level 
                                                {-> expression_medium_level.expression} |
                                            {addition} expression_top_level plus expression_medium_level 
                                                {-> New expression.addition(expression_top_level.expression, expression_medium_level.expression)} |
                                            {abstraction} expression_top_level minus expression_medium_level
                                                {-> New expression.abstraction(expression_top_level.expression, expression_medium_level.expression)};

	expression_medium_level {-> expression} = {simple_exp} expression_bottom_level 
                                                    {-> expression_bottom_level.expression} |
                                                {mult} expression_medium_level mult expression_bottom_level 
                                                    {-> New expression.mult(expression_medium_level.expression, expression_bottom_level.expression)} |
                                                {div} expression_medium_level div expression_bottom_level
                                                    {-> New expression.div(expression_medium_level.expression, expression_bottom_level.expression)};

	expression_bottom_level {-> expression} = {identifier} id 
                                                    {-> New expression.identifier(id)} |
                                                {exp_in_brackets} id l_bracket expression_top_level r_bracket 
                                                    {-> New expression.exp_in_brackets(id, expression_top_level.expression)} |
                                                {value} value 
                                                    {-> New expression.value(value)} |
                                                {function} function_call 
                                                    {-> New expression.function(function_call)} |
                                                {exp_inside_pars} l_par expression_top_level r_par 
                                                    {-> expression_top_level.expression} |
                                                {exps_inside_brackets} l_bracket arglist r_bracket
                                                    {-> New expression.exps_inside_brackets(arglist)};

	function_call = id l_par arglist? r_par {-> New function_call(id, arglist)};
	
    arglist = {exp} expression_top_level 
                {-> New arglist.exp(expression_top_level.expression)} |
              {more_exp} arglist comma expression_top_level
                {-> New arglist.more_exp(arglist, expression_top_level.expression)};
	
	value = {number} integer |
			{string} string_lit;

Abstract Syntax Tree
    
    goal = commands*;

    commands = {func} function |
			   {stmt} statement;

	function = id argument statement;

	argument = id assign_value parameters*;
	
    assign_value = value;
	
    parameters = id assign_value;

	statement = {if} comparison statement |
                {while} comparison statement |
                {for} [id1]:id [id2]:id statement |
                {return} expression |
                {print} arglist |
                {equals} id expression |
                {minus_equals} id expression |
                {div_equals} id expression |
                {array} id [exp1]:expression [exp2]:expression |
                {function} id arglist;

    comparison = {great} [comp1]:comparison [comp2]:comparison |
                 {less} [comp1]:comparison [comp2]:comparison |
                 {exp_equality} [exp1]:expression [exp2]:expression |
                 {exp_not_equals} [exp1]:expression [exp2]:expression |
                 {true} true |
                 {false} false |
                 {expression} expression;

    expression = {addition} [exp1]:expression [exp2]:expression |
                 {abstraction} [exp1]:expression [exp2]:expression |
                 {mult} [exp1]:expression [exp2]:expression |
                 {div} [exp1]:expression [exp2]:expression |
                 {identifier} id |
                 {exp_in_brackets} id expression |
                 {value} value |
                 {function} function_call |
                 {exps_inside_brackets} arglist;

    function_call = id arglist;

    arglist = {exp} expression |
              {more_exp} arglist expression;

    value = {number} integer |
			{string} string_lit;